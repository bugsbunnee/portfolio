// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Stack {
  FRONTEND_WEB
  FRONTEND_MOBILE
  BACKEND
  FULLSTACK
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Project {
  id             String   @id @default(cuid())
  url            String
  title          String   @db.VarChar(255)
  image          String
  description    String   @db.Text
  skills         Skill[]
  isConfidential Boolean  @default(false)
  stack          Stack
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  author         User     @relation(fields: [authorId], references: [id])
  authorId       String   @db.VarChar(255)
}

model Contact {
  id             String   @id @default(cuid())
  firstName      String   
  lastName       String
  email          String
  message        String   @db.VarChar(255)
  createdAt      DateTime @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Certification {
  id     String  @id @default(cuid())
  image  String
  title  String
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model User {
  id               String          @id @default(cuid())
  firstName        String
  lastName         String
  email            String          @unique
  image            String?
  hashedPassword   String
  isAdmin          Boolean         @default(false)
  accounts         Account[]
  sessions         Session[]
  authoredProjects Project[]
  certifications   Certification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
